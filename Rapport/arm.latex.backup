\documentclass[a4paper,12pt]{article}
\usepackage[french]{babel}
\usepackage[utf8]{inputenc}
\usepackage{multicol}
\usepackage{hyperref}
\hypersetup{
	colorlinks,
	citecolor=black,
	filecolor=black,
	linkcolor=black,
	urlcolor=black
}

%opening
\title{Micro architecture de l'ARM v2A}
\author{
  Laniel Francis\\
  \href{mailto:francis.laniel@etu.upmc.fr}{francis.laniel@etu.upmc.fr}
}

\begin{document}

\maketitle

\begin{abstract}
Rapport présentant la micro architure de l'ARM v2A
\end{abstract}

\tableofcontents

\section{Introduction}
\subsection{L'UE VLSI}
Dans le cadre du cours d'\textit{initiation à la conception \textbf{Very Large Scale Integration (VLSI)}} il m'a été demandé une architecture simplifiée d'un processeur basée sur celle de l'ARM v2A.

Pour la modélisation j'ai utilisé le langage \textbf{Very High Speed Integrated Circuit Hardware Description Language (VHDL)} ainsi que des différents outils dont voici la liste :
\begin{description}
\item[\href{http://ghdl.free.fr/}{ghdl}] : un compilateur vhdl libre basé sur gnat
\item[\href{http://gtkwave.sourceforge.net/}{gtkwave}] : un outil libre de visualisation de simulation
\item[\href{https://soc-extras.lip6.fr/en/alliance-abstract-en/}{Alliance CAD tools}] : une suite d'outil libre pour de conception assistée par ordinateur de design VLSI
\end{description}

\subsection{L'ARM v2A}
Le processeur étudié est un processeur RISC 32 bits comportant un pipeline découpé en 5 étages (IFETCH, DECOD, EXE, MEM, WBK). C'est un processeur ARM par conséquent son jeu d'instructions s'appuie sur une gestion élégante des conditions qui sont symbolisées par 4 registres d'un bit appelés ``flags'': 
\begin{description}
\item[N] : ce flag est positionné si une instruction a produit un résultat négatif
\item[Z] : ce flag sera positionné par une instruction ayant produit un résultat nul
\item[C] : ce flag sera levé lorsque une opération non signée produit un dépassement de capacité
\item[V] : le flag V agit identiquement au flag C mais dans le cas d'opérations signées\\
\end{description}

Grâce à ces flags il est possible de conditionner chaque opération, voici un petit aperçu de la puissance de ce langage d'assemblage :
\begin{multicols}{2}
 \begin{verbatim}
	#R4 est l'adresse de notre itérateur
	#R6 est l'adresse de fin du tableau
  loop :
		
 \end{verbatim} 
 \columnbreak
 
\end{multicols}



Le but de cette modélisation était d'obtenir le dessin des masques du processeur en utilisant les outils de la suite Alliance.
Malheureusement la simulation ne s'est pas déroulée comme prévu et je n'ai pas pu obtenir ces dessins...

Dans ce rapport je présenterai d'abord les différents étages de notre processeur puis je concluerai sur mon travail.

\section{Les étages du processeur}
\subsection{IFECTH}
Cet étage a pour principale tâche d'aller lire dans le cache d'instructions la prochaine instruction à éxécuter.
Une fois ceci fait il enverra à l'étage DECOD l'instruction lue.

C'est aussi cet étage qui s'occupe de la gestion du registre \textbf{PC} (Program Counter) et qui répercute les cycles de gel sur la suite du pipelin
\end{document}
