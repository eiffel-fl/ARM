\documentclass[a4paper,12pt]{article}
\usepackage[french]{babel}
\usepackage[utf8]{inputenc}
\usepackage{multicol}
\usepackage{color}
\usepackage[absolute,overlay]{textpos}
\usepackage{tikz}
\usetikzlibrary{arrows,automata}
\usepackage{float}
\usepackage{hyperref}
\hypersetup{
	colorlinks,
	citecolor=black,
	filecolor=black,
	linkcolor=black,
	urlcolor=black
}

%opening
\title{Micro architecture de l'ARM v2A}
\author{
  Laniel Francis\\
  \href{mailto:francis.laniel@etu.upmc.fr}{francis.laniel@etu.upmc.fr}
}

\begin{document}
	\maketitle

	\begin{abstract}
		Rapport présentant la micro architure de l'ARM v2A
	\end{abstract}

	\tableofcontents

	\section{Introduction}
		\subsection{L'UE VLSI}
			Dans le cadre du cours d'\textit{initiation à la conception \textbf{Very Large Scale Integration (VLSI)}} il m'a été demandé de réaliser une architecture simplifiée d'un processeur basée sur celle de l'ARM v2A.\\
			Pour la modélisation j'ai utilisé le langage \textbf{Very High Speed Integrated Circuit Hardware Description Language (VHDL)} ainsi que différents outils dont voici la liste :
			\begin{description}
				\item[\href{http://ghdl.free.fr/}{ghdl}] : un compilateur vhdl libre basé sur gnat
				\item[\href{http://gtkwave.sourceforge.net/}{gtkwave}] : un outil libre de visualisation de simulation
				\item[\href{https://soc-extras.lip6.fr/en/alliance-abstract-en/}{Alliance CAD tools}] : une suite d'outil libre pour la conception assistée par ordinateur de design VLSI
			\end{description}

		\subsection{L'ARM v2A}
			Le processeur étudié est un processeur \textbf{Reduced Instruction Set Computer} (RISC) 32 bits comportant un pipeline découpé en 5 étages (IFETCH, DECOD, EXE, MEM, WBK). C'est un processeur ARM par conséquent son jeu d'instructions s'appuie sur une gestion élégante des conditions qui sont symbolisées par 4 registres d'un bit appelés ``flags'' :
			\begin{description}
				\item[N] : ce flag est positionné si une instruction a produit un résultat négatif
				\item[Z] : ce flag sera positionné par une instruction ayant produit un résultat nul
				\item[C] : ce flag sera levé lorsqu'une opération non signée produit un dépassement de capacité
				\item[V] : le flag V agit identiquement au flag C mais dans le cas d'opérations signées\\
			\end{description}
			Grâce à ces flags il est possible de conditionner chaque opération, voici un petit aperçu de la puissance de ce langage d'assemblage face à celui de l'architecture MIPS:
			\begin{verbatim}
				#code C
				int i;
				for(i = 0; i < size; i++){
				  if(tab[i] < val)
				    tab[i] += val;
				}
				#R4 est l'adresse de notre itérateur
				#R6 est l'adresse de fin du tableau
				#R7 est la valeur à comparer et à potentiellement ajouter
			\end{verbatim}
			\begin{multicols}{2}
				\begin{verbatim}
					#MIPS
					_loop :
						LW R5, 0(R6)
						SLT R10, R5, R7
						BEQ R10, R0, _endif
						NOP
						ADD R5, R5, R7
					_endif :
						ADDIU R4, R4, 4
						BNE R4, R6, _loop
						NOP
				\end{verbatim}
				\columnbreak
				\begin{verbatim}
					#ARM
					_loop :
						LDR R5, 0(R6)
						CMP R7, R5
						ADDLT R5, R5, R7
						ADD R4, R4, #4
						BNE R4, R6, _loop
				\end{verbatim}
			\end{multicols}

			Pour cet \textbf{exemple} il est clair que même en optimisant le code de l'assembleur MIPS le code ARM sera meilleur en terme de cycles par instruction. Bien entendu il est impossible d'affirmer qu'en \textbf{général} un langage d'assemblage est meilleur qu'un autre surtout que le nombre de cycles n'est pas la seule variable à prendre en compte.

			La modélisation de ce processeur aurait du m'amener à obtenir le dessin des masques en utilisant les outils Alliance sur le code VHDL écrit.
			Malheureusement la simulation ne s'est pas déroulée comme prévu et je n'ai pas pu obtenir ces dessins...

			Dans ce rapport je présenterai d'abord les différents étages de notre processeur puis je concluerai sur mon travail.

	\section{Les étages du processeur}
		\subsection{IFECTH}
			Cet étage a pour principale tâche d'aller lire dans le cache d'instructions la prochaine instruction à éxécuter.
			Une fois ceci fait il enverra à l'étage DECOD l'instruction lue.
			\begin{figure}[H]
				\centering
				\def\svgwidth{\columnwidth}
				\scriptsize{
					\input{IFETCH.pdf_tex}
				}
				\caption{Schéma de l'étage IFETCH (les couleurs servent uniquement à clarifier le dessin)}
			\end{figure}

			C'est aussi cet étage qui s'occupe de la gestion du registre \textbf{PC} (Program Counter) et qui répercute les cycles de gel sur la suite du pipeline notamment grâce à cette ligne :
			\begin{verbatim}
			if_ir_valid <= not ic_stall;
			\end{verbatim}

		\subsection{DECOD}
			C'est dans cet étage du pipeline que seront décodées les instructions venant de l'étage IFETCH.\\
			Les instructions sont codées sur 32 bits, il existe plusieurs types d'instructions dont notamment :
			\begin{description}
				\item[REGOP] : Les instructions de \textbf{Data Processing}, ce sont les instructions classiques comme add, or ou and.
				\item[MULT] : Instruction de multiplication, il existe une version utilisant 4 registres où le dernier registre sera accumulé au résultat ($dest = op1 * op2 + op3$).
				\item[TRANS] : Les instructions de transfert tels quels sdrb ou ldr.
				\item[BRANCH] : Les instructions de branchement.
			\end{description}
			La condition d’exécution des instructions est toujours codée sur les 4 premiers bits (31 .. 28).\\
			Par exemple un \textbf{addnes R1, R2, R3} aura pour codage :\\
			\textbf{0001 0000 1001 0010 0001 0000 0000 0011}\\
			Et ce code \textbf{0000 0000 0000 1000 0000 0100 1001 0001} correspond à un \textbf{muleq R8, R1, R4}.

			Dans le cas d'une REGOP le second opérande peut prendre plusieurs formes :
			\begin{itemize}
				\item Un simple immédiat.
				\item Un simple registre.
				\item Un registre décalé d'une valeur sur 5 bits (donc de 0 à 31).
				\item Un registre décalé de la valeur contenue dans un registre.
			\end{itemize}
			Pour mon architecture le dernier cas ne fonctionne pas...
			
			Il existe plusieurs types de décalages, les voici :
			\begin{description}
				\item[LSL] : Pour Logical Shit Left, c'est un simple décalage à gauche.
				\item[LSR] : Logical Shit Right, il fonctionne comme le LSL mais à droite.
				\item[ASR] : Arithmetic Shit Right, son comportement est identique à celui de LSR mais le registre sera étendu par la valeur de son bit de signe
				\item[ROR] : Rotate Right, une rotation vers la droite
				\item[RRX] : Rotate Right Extend, une rotation vers la droite étendu utilisant le carry flag. RRX ne peut pas prendre de valeur de décalage.
			\end{description}
			Dans mon architecture l'ASR ne fonctionne pas, en effet la valeur sign\_op2 est calculé trop tôt et par conséquent elle est toujours égale à X``00000000''.
			
			DECOD implémente aussi une machine à état afin de gérer le ``fetch'' d'une instruction. Soit la suite d'instruction suivante :
			\begin{verbatim}
				ADD R5, R6, R7
				SUB R10, R5, R11
			\end{verbatim}
			Il y a clairement une dépendance de données entre ces instructions sur le registre R5. Par conséquent tant que l'instruction ADD n'aura pas produit son résultat il sera impossible de lancer l'instruction SUB. Donc pendant ce temps le prochain état (comprendre l'état de DECOD pour l'instruction SUB) sera OPWAIT.\\
			J'ai complété le code du process gérant la machine à état mais je n'ai pas vérifié son fonctionnement par conséquent je ne pense pas qu'elle fonctionne.
			\begin{figure}[H]
				\begin{tikzpicture}[->, >= stealth, shorten >= 1pt, auto, node distance = 4cm, semithick, initial text = $\overline{RESET\_N}$, initial where = right]
					\tikzstyle{every state} = [fill = white, draw = black, text = black]

					\node [state] (A) {RUN};
					\node [state] (B) [right of = A] {ADR};
					\node [state] (C) [below of = A] {OPWAIT};
					\node [state] (D) [left of = A] {MTRANS};
					\node [state] (E) [above left of = A] {MUL};
					\node [state] (F) [above of = A] {SWAP};
					\node [state] (G) [below of = B] {ADR PC};
					\node [state] (H) [right of = B] {LPC};
					\node [initial, state] (I) [above of = B] {FETCH};

					\path (A) edge [yellow, in = -30, out = -60, loop] node [yellow, pos = 0.33, sloped] {OPOK} (A)
						edge node {BRANCH} (B)
						edge node [sloped, pos = 0.1] {$\overline{OPOK}$} (C)
						edge node {} (D)
						edge [bend left, red] node [red, pos=0.8] {MUL} (E)
						edge node [sloped, pos=0.8] {SWAP} (F)
						edge [bend left] node {} (G)
						(B) edge node {} (I)
						(C) edge [loop left] node {$\overline{OPOK}$} (C)
						edge [blue, bend left] node [blue] {OPOK} (A)
						edge [green] node [green, sloped, pos = 0.9] {OPOK.BRANCH} (B)
						edge node {} (D)
						edge node {} (E)
						(D) edge [loop left] node {} (D)
						edge node {} (A)
						edge node {} (C)
						(E) edge [loop left] node {$\overline{MULOK}$} (E)
						edge node [sloped, pos=0.1] {MULOK} (A)
						(F) edge [loop left] node {$\overline{SWAPOK}$} (F)
						edge [bend left] node [pos = 0.1] {SWAPOK} (A)
						(G) edge node {} (H)
						(H) edge node {} (I)
						(I) edge node {} (A);
				\end{tikzpicture}
				\caption{Machine à état de DECOD (les couleurs servent uniquement à clarifier le dessin)}
			\end{figure}

		\subsection{EXE}
			C'est ici qu'aura lieu l'exécution de nos instructions ainsi que les décalages. Dans notre processeur nous avons décidé d'implémenter réellement que 4 instructions : add, or, xor et and.
			
			En effet à partir de ces 4 instructions il est possible de recréer toutes les REGOP, par exemple un sub ne sera en réalité qu'un add dont le second opérande aura été complémenté à 2 afin d'obtenir son négatif.
			
			En VHDL il existe les opérateurs and, or et xor par conséquent les instructions correspondantes sont facilement réalisable.
			
			Par contre ce n'est pas le cas de l'addition puisque l'addition n'est pas définie entre des objets du types std\_logic\_vector, il aurait donc fallu convertir ces objets ce qui aurait sûrement posé problème lors de la synthèse.
			
			Pour pallier à cela il a fallu utiliser une autre stratégie. La stratégie la plus optimale aurait été d'utiliser un additionneur de type \textbf{Carry-lookahead} mais je ne suis pas arrivé à développer cette solution.
			Je me suis donc rabattu sur un additionneur complet 1 bit itéré 32 fois...
			\begin{multicols}{2}
				\begin{figure}[H]
				\centering
				\def\svgwidth{\columnwidth}
				\tiny{
					\input{Full-adder.pdf_tex}
				}
				\caption{Schéma d'un additionneur complet}
			\end{figure}
				\columnbreak
				\begin{verbatim}
					--code du fulladder
					cout(0) := dec_alu_cy;

					for i in 0 to 31 loop
					  sout1(i) := op1(i) xor op2(i);

					  cout1(i) := op1(i) and op2(i);

					  sout(i) := cout(i) xor sout1(i);
					  cout2(i) := cout(i) and sout1(i);

					  cout(i + 1) := cout1(i) or cout2(i);
					end loop;
				\end{verbatim}
			\end{multicols}

			D'après mes tests toutes les REGOP donnent un résultat correct.\\
			Cet étage comporte aussi un bypass (\textbf{EXE\_ALU\_RES} sur la figure 4) afin de limiter les cycles de gel.
			\begin{figure}[H]
				\centering
				\def\svgwidth{\columnwidth}
				\tiny{
					\input{EXE.pdf_tex}
				}
				\caption{Schéma de l'étage EXE}
			\end{figure}
			\textbf{DEC\_SHIT\_TYPE} correspond en fait à \textbf{DEC\_SHIFT\_LSL}, \textbf{DEC\_SHIFT\_LSR}, \textbf{DEC\_SHIFT\_ASR}, \textbf{DEC\_SHIFT\_ROR} et \textbf{DEC\_SHIFT\_RRX}. Tout comme \textbf{EXE\_FLAGS} correspond en fait aux 4 ``flags'' présenté dans l'introduction
			
		\subsection{MEM}
			C'est dans cet étage que les instructions STR et LDR prennent tout leur sens. En effet l'adresse calculée à l'étage EXE ainsi que la potentielle donnée à stocker seront envoyées au cache de données via cet étage.
			
	\section{Conclusion}
		Il est clair que les objectifs de l'UE n'ont pas été atteints, la synthèse n'a pu être mené à terme mais l'architecture présenté n'est clairement pas complète.
		Les deux principales fonctions de cette architecture sont :
		\begin{itemize}
			\item Le décodage des instructions
			\item Les opérations et presque tous les décalages de l'étage EXEC
		\end{itemize}
		Pourtant cette UE m'a permis d'apprendre le VHDL qui est un langage très particulier, en effet la modélisation est très différente de la programmation. De plus même s'il est possible d'utiliser des algorithmes ceci sont très différents de ceux que j'ai l'habitude d'utilisé puisqu'ils sont plus bas niveau.
		
		Le VHDL permet de se placer au niveau des bits là où les langages de programmation classiques sont limités à l'octet.
		
		En apprenant le VHDL j'ai aussi pu me rendre compte qu'il était possible d'effectuer beaucoup de tâches en matériel.
		
		Enfin cette UE m'a aussi permis d'utiliser de nouveaux outils tels que ghdl, gtkwave ou les outils Alliance.
\end{document}